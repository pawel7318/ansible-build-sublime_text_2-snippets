<snippet>
  <content><![CDATA[
  docker: >
    publish_all_ports=${1:False #  Publish all exposed ports to the host interfaces}
    tty=${2:False #  Allocate a pseudo-tty}
    links=${3:None #  Link container(s) to other container(s) (e.g. links=redis,postgresql:db)}
    lxc_conf=${4:None #  LXC config parameters,  e.g. lxc.aa_profile:unconfined}
    image=${5:None # ! Set container image to use}
    password=${6:None #  Set remote API password}
    hostname=${7:None #  Set container hostname}
    docker_url=${8:unix://var/run/docker.sock #  URL of docker host to issue commands to}
    state=${9:present #  Set the state of the container}
    dns=${10:None #  Set custom DNS servers for the container}
    volumes_from=${11:None #  Set shared volume(s) from another container}
    privileged=${12:False #  Set whether the container should run in privileged mode}
    username=${13:None #  Set remote API username}
    memory_limit=${14:256MB #  Set RAM allocated to container}
    env=${15:None #  Set environment variables (e.g. env="PASSWORD=sEcRe7,WORKERS=4")}
    expose=${16:None #  Set container ports to expose for port mappings or links. (If the port is already exposed using EXPOSE in a Dockerfile, you don't need to expose it again.)}
    stdin_open=${17:False #  Keep stdin open}
    detach=${18:True #  Enable detached mode on start up, leaves container running in background}
    count=${19:1 #  Set number of containers to run}
    name=${20:None #  Set the name of the container (cannot use with count)}
    command=${21:None #  Set command to run in a container on startup}
    volumes=${22:None #  Set volume(s) to mount on the container}
    ports=${23:None #  Set private to public port mapping specification using docker CLI-style syntax [([<host_interface>:[host_port]])|(<host_port>):]<container_port>[/udp]}
  ]]></content>
  <tabTrigger>an-docker</tabTrigger>
  <scope>source.yaml</scope>
</snippet>
