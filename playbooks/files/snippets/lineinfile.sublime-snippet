<snippet>
  <content><![CDATA[
  lineinfile: >
    insertbefore=${1: #  Used with C(state=present). If specified, the line will be inserted before the specified regular expression. A value is available; C(BOF) for inserting the line at the beginning of the file. May not be used with C(backrefs).}
    dest=${2: # ! The file to modify.}
    create=${3:no #  Used with C(state=present). If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.}
    backrefs=${4:no #  Used with C(state=present). If set, line can contain backreferences (both positional and named) that will get populated if the C(regexp) matches. This flag changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) doesn't match anywhere in the file, the file will be left unchanged. If the C(regexp) does match, the last matching line will be replaced by the expanded line parameter.}
    state=${5:present #  Whether the line should be there or not.}
    others=${6: #  All arguments accepted by the M(file) module also work here.}
    insertafter=${7:EOF #  Used with C(state=present). If specified, the line will be inserted after the specified regular expression. A special value is available; C(EOF) for inserting the line at the end of the file. May not be used with C(backrefs).}
    regexp=${8: #  The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove.  Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html).}
    line=${9: #  Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches. The backreferences should be double escaped (see examples).}
    backup=${10:no #  Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.}
    validate=${11:None #  validation to run before copying into place. The command is passed securely so shell features like expansion and pipes won't work.}
  ]]></content>
  <tabTrigger>an-lineinfile</tabTrigger>
  <scope>source.yaml</scope>
</snippet>
