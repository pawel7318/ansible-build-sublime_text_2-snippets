<snippet>
  <content><![CDATA[
  gc_storage: >
    src=${1:None #  The source file path when performing a PUT operation.}
    force=${2:True #  Forces an overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations.}
    permission=${3:private #  This option let's the user set the canned permissions on the object/bucket that are created. The permissions that can be set are 'private', 'public-read', 'authenticated-read'.}
    dest=${4: #  The destination file path when downloading an object/key with a GET operation.}
    gcs_secret_key=${5:None # ! GCS secret key. If not set then the value of the GCS_SECRET_KEY environment variable is used.}
    object=${6:None #  Keyname of the object inside the bucket. Can be also be used to create "virtual directories" (see examples).}
    bucket=${7:None # ! Bucket name.}
    gcs_access_key=${8:None # ! GCS access key. If not set then the value of the GCS_ACCESS_KEY environment variable is used.}
    expiration=${9:None #  Time limit (in seconds) for the URL generated and returned by GCA when performing a mode=put or mode=get_url operation. This url is only avaialbe when public-read is the acl for the object.}
    mode=${10:None # ! Switches the module behaviour between upload, download, get_url (return download url) , get_str (download object as string), create (bucket) and delete (bucket).}
  ]]></content>
  <tabTrigger>an-gc_storage</tabTrigger>
  <scope>source.yaml</scope>
</snippet>
